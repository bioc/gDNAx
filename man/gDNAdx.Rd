% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dx.R
\name{gDNAdx}
\alias{gDNAdx}
\alias{plot,gDNAx,ANY-method}
\alias{plotAlnOrigins}
\alias{plotFrgLength}
\title{Calculate gDNA diagnostics}
\usage{
gDNAdx(
  bfl,
  txdb,
  singleEnd = TRUE,
  strandMode = 1L,
  stdChrom = TRUE,
  yieldSize = 100000L,
  verbose = TRUE,
  BPPARAM = SerialParam(progressbar = verbose)
)

\S4method{plot}{gDNAx,ANY}(x, group = 1L, labelpoints = FALSE, ...)

plotAlnOrigins(x, group = 1L)

plotFrgLength(x)
}
\arguments{
\item{bfl}{A \code{BamFile} or \code{BamFileList} object, or a character
string vector of BAM filenames.}

\item{txdb}{A character string of a \code{TxDb} package, or a \code{TxDb}
object, with gene and transcript annotations. For accurate calculations, it
is important that the version of these annotations matches the version of
the annotations used to inform the alignment of spliced reads, by the
short-read aligner software that generated the input BAM files.}

\item{singleEnd}{(Default FALSE) Logical value indicating if reads are
single (\code{TRUE}) or paired-end (\code{FALSE}).}

\item{strandMode}{(Default 1L) Numeric vector which can take values 0, 1,
2 or \code{NA}. The strand mode is a per-object switch on
\code{\link[GenomicAlignments:GAlignmentPairs-class]{GAlignmentPairs}}
objects that controls the behavior of the strand getter. See
\code{\link[GenomicAlignments:GAlignmentPairs-class]{GAlignmentPairs}}
class for further detail. If \code{singleEnd = TRUE}, then \code{strandMode}
is ignored. For not strand-specific libraries, use \code{NA}}

\item{stdChrom}{(Default TRUE) Logical value indicating whether only
alignments in the 'standard chromosomes' should be used. Consult the help
page of the function \code{\link[GenomeInfoDb]{keepStandardChromosomes}}
from the package \code{GenomeInfoDb} for further
information.}

\item{yieldSize}{(Default 1e5) Number of records to read from each input BAM
file to calculate the diagnostics.}

\item{verbose}{(Default TRUE) Logical value indicating if progress should be
reported through the execution of the code.}

\item{BPPARAM}{An object of a \linkS4class{BiocParallelParam} subclass
to configure the parallel execution of the code. By default, a
\linkS4class{SerialParam} object is used, which does not use any
parallelization, with the flag \code{progress=TRUE} to show progress
through the calculations.}

\item{x}{A 'gDNAx' object.}

\item{group}{A string character vector or a factor, with as many values
as BAM files analyzed in 'x', whose values define groups among those
BAM files.}

\item{labelpoints}{(Default FALSE) A logical indicator that labels points
in those plots where each point represents a BAM file. Labels correspond
to the index number of the BAM file in 'x'.}

\item{...}{Named arguments to be passed to \code{\link[base:plot]{plot}}.}
}
\value{
A \linkS4class{gDNAx} object.
}
\description{
Calculate diagnostics for assessing the presence of genomic DNA (gDNA)
in RNA-seq data over a subset of the alignments in the input BAM files.

Plot diagnostics calculated with gDNAdx()

Using the output from gDNAdx(), plot the genomic origin of the alignments.

Plot fragments length distributions estimated with gDNAdx()
}
\examples{
library(gDNAinRNAseqData)

library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene

# Retrieving BAM files
bamfiles <- LiYu22subsetBAMfiles()

# Getting information about the gDNA concentrations of each BAM file
pdat <- LiYu22phenoData(bamfiles)

gdnax <- gDNAdx(bamfiles, txdb, singleEnd=FALSE, strandMode=NA)
gdnax

library(gDNAinRNAseqData)

library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene

# Retrieving BAM files
bamfiles <- LiYu22subsetBAMfiles()

# Getting information about the gDNA concentrations of each BAM file
pdat <- LiYu22phenoData(bamfiles)

gdnax <- gDNAdx(bamfiles, txdb, singleEnd=FALSE, strandMode=NA)

# plot gDNA diagnostic measures
plot(gdnax, group=pdat$gDNA, pch=19)

library(gDNAinRNAseqData)

library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene

# Retrieving BAM files
bamfiles <- LiYu22subsetBAMfiles()

# Getting information about the gDNA concentrations of each BAM file
pdat <- LiYu22phenoData(bamfiles)

gdnax <- gDNAdx(bamfiles, txdb, singleEnd=FALSE, strandMode=NA)

# plot origin of alignments per sample
plotAlnOrigins(gdnax, group=pdat$gDNA)

library(gDNAinRNAseqData)

library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene

# Retrieving BAM files
bamfiles <- LiYu22subsetBAMfiles()

# Getting information about the gDNA concentrations of each BAM file
pdat <- LiYu22phenoData(bamfiles)

gdnax <- gDNAdx(bamfiles, txdb, singleEnd=FALSE, strandMode=NA)

# plot fragments length distributions
plotFrgLength(gdnax)

}
