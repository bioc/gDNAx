% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R
\docType{class}
\name{gDNAx-class}
\alias{gDNAx-class}
\alias{getDx}
\alias{getDx,gDNAx-method}
\alias{show,gDNAx-method}
\alias{show}
\alias{getIgc}
\alias{getIgc,gDNAx-method}
\alias{getInt}
\alias{getInt,gDNAx-method}
\title{gDNAx class}
\usage{
\S4method{getDx}{gDNAx}(x)

\S4method{show}{gDNAx}(object)

\S4method{getIgc}{gDNAx}(x)

\S4method{getInt}{gDNAx}(x)
}
\arguments{
\item{x}{A \linkS4class{gDNAx} object.}

\item{object}{A \linkS4class{gDNAx} object.}
}
\value{
\code{features()}: A \code{GRanges} object with intergenic ranges.

\code{features()}: A \code{GRanges} object with intron ranges.
}
\description{
This is a class for storing the results of a call to the
'gDNAdx()' function.
}
\section{Slots}{

\describe{
\item{\code{bfl}}{A \linkS4class{BamFileList} object.}

\item{\code{txdbpkg}}{A \linkS4class{TxDb} object.}

\item{\code{singleEnd}}{Logical value indicating if reads are single (\code{TRUE})
or paired-end (\code{FALSE}).}

\item{\code{strandMode}}{Numeric vector which can take values 0, 1 or 2. The strand
mode is a per-object switch on
\code{\link[GenomicAlignments:GAlignmentPairs-class]{GAlignmentPairs}}
objects that controls the behavior of the strand getter. See
\code{\link[GenomicAlignments:GAlignmentPairs-class]{GAlignmentPairs}}
class for further detail.}

\item{\code{stdChrom}}{Logical value indicating whether only alignments in the
'standard chromosomes' should be used. Consult the help page of the function
\code{\link[GenomeInfoDb]{keepStandardChromosomes}} from the package
\code{GenomeInfoDb} for further information.}

\item{\code{readLength}}{Integer value storing the read length.}

\item{\code{yieldSize}}{Integer value storing the number of alignments employed by
the function \code{\link{gDNAdx}()}.}

\item{\code{diagnostics}}{A 'data.frame' object storing the diagnostics calculated
by the function 'gDNAdx()'.}

\item{\code{igcfrglen}}{A 'list' object storing the fragment lengths derived from
alignments in intergenic regions.}

\item{\code{intfrglen}}{A 'list' object storing the fragment lengths derived from
alignments in intronic regions.}

\item{\code{scjfrglen}}{A 'list' object storing the fragment lengths derived from
spliced-compatible junction alignments in transcripts.}

\item{\code{scefrglen}}{A 'list' object storing the fragment lengths derived
from spliced-compatible exonic alignments in transcripts.}

\item{\code{sicfrglen}}{A 'list' object storing the fragment lengths derived
from splice-incompatible alignments in transcripts.}

\item{\code{intergenic}}{A 'GRanges' object storing the intergenic feature
annotations.}

\item{\code{intronic}}{A 'GRanges' object storing the intronic feature
annotations.}

\item{\code{transcripts}}{A 'GRangesList' object storing the transcript annotations.}

\item{\code{tx2gene}}{A string character vector storing the correspondence between
transcripts and genes according to an 'TxDb' object.}
}}

\examples{
library(gDNAinRNAseqData)

library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene

# Retrieving BAM files
bamfiles <- LiYu22subsetBAMfiles()

# Getting information about the gDNA concentrations of each BAM file
pdat <- LiYu22phenoData(bamfiles)

gdnax <- gDNAdx(bamfiles, txdb, singleEnd=FALSE, strandMode=NA)
gdnax

library(gDNAinRNAseqData)

library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene

# Retrieving BAM files
bamfiles <- LiYu22subsetBAMfiles()

# Getting information about the gDNA concentrations of each BAM file
pdat <- LiYu22phenoData(bamfiles)

gdnax <- gDNAdx(bamfiles, txdb, singleEnd=FALSE, strandMode=NA)
dx <- getDx(gdnax)
head(dx)

library(gDNAinRNAseqData)

library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene

# Retrieving BAM files
bamfiles <- LiYu22subsetBAMfiles()

# Getting information about the gDNA concentrations of each BAM file
pdat <- LiYu22phenoData(bamfiles)

gdnax <- gDNAdx(bamfiles, txdb, singleEnd=FALSE, strandMode=NA)
gdnax

library(gDNAinRNAseqData)

library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene

# Retrieving BAM files
bamfiles <- LiYu22subsetBAMfiles()

# Getting information about the gDNA concentrations of each BAM file
pdat <- LiYu22phenoData(bamfiles)

gdnax <- gDNAdx(bamfiles, txdb, singleEnd=FALSE, strandMode=NA)
igc <- getIgc(gdnax)
head(igc, n=3)

library(gDNAinRNAseqData)

library(TxDb.Hsapiens.UCSC.hg38.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene

# Retrieving BAM files
bamfiles <- LiYu22subsetBAMfiles()

# Getting information about the gDNA concentrations of each BAM file
pdat <- LiYu22phenoData(bamfiles)

gdnax <- gDNAdx(bamfiles, txdb, singleEnd=FALSE, strandMode=NA)
int <- getInt(gdnax)
head(int, n=3)

}
